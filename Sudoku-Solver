#include<bits/stdc++.h>
using namespace std;

bool rowSafe(int num,int row,int board[9][9])
{
    for(int i=0;i<9;i++)
    {
        if(board[row][i]==num)
            return false;
    }
    return true;
}

bool colSafe(int num,int col,int board[9][9])
{
    for(int i=0;i<9;i++)
    {
        if(board[i][col]==num)
            return false;
    }
    return true;
}

bool boxSafe(int num,int row,int col,int board[9][9])
{
    int r = row - row%3;
    int c = col - col%3;
    
    for(int i=r;i<r+3;i++)
    {
        for(int j=c;j<c+3;j++)
        {
            if(board[i][j]==num)
                return false;
        }
    }
    return true;
}

bool canPlace(int num,int row,int col, int board[9][9])
{
    if(rowSafe(num,row,board) && colSafe(num,col,board) && boxSafe(num,row,col,board))
        return true;
    return false;
}

bool sudokusolver(int board[9][9])
{
    int row=-1;
    int col=-1;
    bool isempty=false;
    
    for(int i=0;i<9;i++)                                             // Finding empty slots
    {
        for(int j=0;j<9;j++)
        {
            if(board[i][j]==0)
            {
                row=i;
                col=j;
                isempty=true;
                break;
            }
        }
        if(isempty)
            break;
    }
    if(!isempty)
        return true;
    
    for(int i=1;i<=9;i++)                                           // Try to place a value that does not voilates Sudoku constraints at the moment.
    {
        if(canPlace(i,row,col,board))
        {
            board[row][col]=i;
            if(sudokusolver(board))                                 // Recursively calling Sudoku-Solver to check if its the correct slot for'i' or not.
                return true;
            board[row][col]=0;    
        }
    }
    return false;
}

int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int board[9][9];
	    
	    for(int i=0;i<9;i++)                                           // Input Matrix
	    {
	        for(int j=0;j<9;j++)
	        {
	            cin>>board[i][j];
	        }
	    }
	    
	    if(sudokusolver(board))                                        // Sudoku-Solver called
	        for(int i=0;i<9;i++)
	        {
	            for(int j=0;j<9;j++)
	            {
	                cout<<board[i][j]<<" ";
	            }
	            cout<<endl;
	        }
	    else
	        cout<<"Not possible to solve the board "<<endl;
	}
	return 0;
}
