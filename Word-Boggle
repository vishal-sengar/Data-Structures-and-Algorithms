#include<bits/stdc++.h>
using namespace std;

bool isSafe(int i,int j,int n,int m,vector<vector<bool>>& visited)
{
    if(i<0 || j<0 || i>n-1 || j>m-1 || visited[i][j]==true)
        return false;
    return true;    
}

bool isWord(string word,vector<string>& dictionary)
{
    for(int i=0;i<dictionary.size();i++)
    {
        if(word.compare(dictionary[i])==0)
            return true;
    }
    return false;
}

void utility(vector<vector<char>>& boggle,vector<string>& dictionary,vector<vector<bool>>& visited,int row,int col,string str)
{
    visited[row][col]=true;
    
    str=str+boggle[row][col];
    
    int n=boggle.size();
    int m=boggle[0].size();
    
    if(isWord(str,dictionary))
        cout<<str<<endl;
        
    for(int i=row-1;i<=row+1;i++)
    for(int j=col-1;j<=col+1;j++)
    {
        if(isSafe(i,j,n,m,visited))
            utility(boggle,dictionary,visited,i,j,str);
    }
    
    visited[row][col]=false;
    str.erase(str.length()-1);
}

void wordBoggle(vector<vector<char>>& boggle,vector<string>& dictionary)
{
    int n=boggle.size();
    int m=boggle[0].size();
    
    string str="";
    
    vector<vector<bool>>visited(n,vector<bool>(m,false));
    
    for(int i=0;i<n;i++)
    for(int j=0;j<m;j++)
        utility(boggle,dictionary,visited,i,j,str);
}

int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int x;
	    cin>>x;
	    string word;
	    vector<string>dictionary(x);
	    for(int i=0;i<x;i++)
	    {
	        cin>>word;
	        dictionary[i]=word;
	    }
	    int n,m;
	    char c;
	    cin>>n>>m;
	    vector<vector<char>>boggle(n,vector<char>(m));
	    for(int i=0;i<n;i++)
	    for(int j=0;j<m;j++)
	    {
	        cin>>c;
	        boggle[i].push_back(c);
	    }
	    wordBoggle(boggle,dictionary);    
	}
	return 0;
}
